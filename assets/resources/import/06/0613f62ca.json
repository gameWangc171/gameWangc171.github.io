[1,["ecpdLyjvZBwrvm+cedCcQy","688/ZtTaBPnLuPIGOPDN1N","1bH817GWNJPII/nnHYAGl9","a4uodVxv5A747q7R/7IMyY","caJCBMqMVJiJFJYQFH++YR","52xQkNCthNcq5IFB0rFrmW","74EEuX1lBP94qJZUm8kvIt","e18MhPBxpJ77W+0AHG85sa","1dtK5tXVhD3oPx+VQmYBKK"],["_textureSetter","_spriteFrame","_effectAsset","root","coffee","tumbler_f","tumbler_b","node","data","coffeeMaterial"],["cc.SpriteFrame",["cc.Node",["_name","_parent","_components","_prefab","_contentSize","_children","_trs"],2,1,2,4,5,2,7],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_components","_prefab"],2,2,9,4],["071a9kn30BEsouzuJRkjaZl",["node","tumbler_b","tumbler_f","coffee","coffeeMaterial"],3,1,1,1,1,6],["cc.Sprite",["_sizeMode","_isTrimmedMode","node","_materials"],1,1,3]],[[2,0,1,2,2],[8,0,1,2,3,3],[1,0,1,2,3,4,6,2],[3,0,1,2,4],[4,0,1,3],[5,0,2],[6,0,1,2,3,2],[1,0,1,5,2,3,4,2],[7,0,1,2,3,4,1],[2,1,2,1]],[[[[3,"Wave",[{"hash":134971606,"record":null,"name":"Wave|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  uniform Custom {\n    float waveHeight;\n    float isWave;\n  };\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\nfloat waveShapeRotate (in float uvx , in float moveX, in float height) {\n  float wavePow = 0.012;\n  float waveParams = 30.0;\n  float movesp = 2.6;\n  float curMove = moveX;\n  return sin(uvx * waveParams + curMove) * wavePow + height;\n }\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    vec2 uv = gl_FragCoord.xy/cc_screenSize.xy;\n    #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    #endif\n    o *= v_color;\n      if(isWave>0.2){\n        float waveUvY = waveShapeRotate(v_uv0.x, cc_time.x,waveHeight);\n        float downWave =  smoothstep(v_uv0.y, v_uv0.y + 0.01, waveUvY);\n        o.a *= (1.0-downWave);\n      }\n    ALPHA_TEST(o);\n    #if USE_BGRA\n      gl_FragColor = o.bgra;\n    #else\n      gl_FragColor = o.rgba;\n    #endif\n  }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nuniform mediump vec4 cc_screenSize;\n  uniform float waveHeight;\nuniform float isWave;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\nfloat waveShapeRotate (in float uvx , in float moveX, in float height) {\n  float wavePow = 0.012;\n  float waveParams = 30.0;\n  float movesp = 2.6;\n  float curMove = moveX;\n  return sin(uvx * waveParams + curMove) * wavePow + height;\n }\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    vec2 uv = gl_FragCoord.xy/cc_screenSize.xy;\n    #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    #endif\n    o *= v_color;\n      if(isWave>0.2){\n        float waveUvY = waveShapeRotate(v_uv0.x, cc_time.x,waveHeight);\n        float downWave =  smoothstep(v_uv0.y, v_uv0.y + 0.01, waveUvY);\n        o.a *= (1.0-downWave);\n      }\n    ALPHA_TEST(o);\n    #if USE_BGRA\n      gl_FragColor = o.bgra;\n    #else\n      gl_FragColor = o.rgba;\n    #endif\n  }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Custom","binding":1,"members":[{"name":"waveHeight","type":13,"count":1},{"name":"isWave","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Wave|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"isWave":{"type":13,"value":[0.3]},"waveHeight":{"type":13,"value":[0.6]}}}]}]]],0,0,[],[],[]],[[{"name":"glass11","rect":[69,65,88,111],"offset":[-2,-5.5],"originalSize":[230,230],"capInsets":[0,0,0,0]}],[0],0,[0],[0],[1]],[[[4,"Wave",{"0":{"defines":{"USE_TEXTURE":true},"props":{"isWave":0.3,"waveHeight":0.6}}}]],0,0,[0],[2],[2]],[[{"name":"1001","rect":[70,75,91,111],"offset":[0.5,-15.5],"originalSize":[230,230],"capInsets":[0,0,0,0]}],[0],0,[0],[0],[3]],[[{"name":"glass10","rect":[69,73,93,114],"offset":[0.5,-15],"originalSize":[230,230],"capInsets":[0,0,0,0]}],[0],0,[0],[0],[4]],[[[5,"coffee"],[6,"coffee",[-6],[[8,-5,-4,-3,-2,3]],[9,-1,0]],[7,"tumbler1",1,[-8,-9],[-7],[0,"d2BOyfcPtB+bHJ7jXXHrD6",1,0],[5,230,230]],[2,"coffee",2,[-10],[0,"41Dy7V3j1EDZK/VJ57HXYL",1,0],[5,230,230],[-0.172,-0.686,0,0,0,0,1,1,1,1]],[1,0,false,3,[0]],[2,"tumbler0",2,[-11],[0,"59P6rdNqdM4rS91g1N4OVu",1,0],[5,230,230],[-0.172,-0.686,0,0,0,0,1,1,1,1]],[1,0,false,5,[1]],[1,0,false,2,[2]]],0,[0,3,1,0,4,4,0,5,6,0,6,7,0,7,1,0,-1,2,0,-1,7,0,-1,3,0,-2,5,0,-1,4,0,-1,6,0,8,1,11],[0,0,0,0,4,6,7],[-1,-1,-1,9,1,1,1],[0,0,0,5,6,7,8]]]]